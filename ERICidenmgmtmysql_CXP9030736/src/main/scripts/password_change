#!/bin/bash
###############################################################################
# COPYRIGHT Ericsson 2015
# The copyright to the computer program(s) herein is the property of
# Ericsson Inc. The programs may be used and/or copied only with written
# permission from Ericsson Inc. or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the
# program(s) have been supplied.
#
###############################################################################
# This script changes the MySQL server password
# Author: Team ENMeshed
#
###############################################################################

IDMMYSQL_PASSKEY=/ericsson/tor/data/idenmgmt/idmmysql_passkey

# MySQL variables
MYSQL_HOME=/opt/mysql
MYSQL_BIN_DIR=$MYSQL_HOME/bin
MYSQL=$MYSQL_BIN_DIR/mysql
MYSQL_OPENIDM_USER=openidm

GREP="/bin/grep"
CUT="/bin/cut"
OPENSSL=/usr/bin/openssl

GLOBAL_PROPERTY_FILE=/ericsson/tor/data/global.properties
source $GLOBAL_PROPERTY_FILE

# set logs file
LOG_FILE="/var/log/mysql/mysql-password-change-`/bin/date "+%F:%H:%M:%S%:z"`.log"

# old password for idmmysql is provided by first parameter of the script in the encrypted form
PREVIOUS_PASS_ENC="$1"
PREVIOUS_PASS=""

# this script is performed after password change in global.properties, so new password is
# taken from global.properties file
NEW_PASS=""


###########################################################################################
# Function: LogMessage
# Description: This function creates the log file
# Parameters: String to save in log file
# Return:  none
###########################################################################################
LogMessage()
{
    local msg="$(/bin/date "+%F:%H:%M:%S%:z"): $1"
    echo $msg >> $LOG_FILE
    echo $msg
}


###########################################################################################
# Function: SetLogFile
# Description: This function creates the log file
# Parameters: LOG_FILE
# Return:  0 everything ok, 1 fail
###########################################################################################
SetLogFile()
{
    local log_file="$1"
    local log_dir="$(dirname ${log_file})"

    echo  "Log file: $log_file"

    # Create the log directory if it does not already exist
    if [ ! -d $log_dir ] ; then
        mkdir -p $log_dir
        if [ $? != 0 ] ; then
            echo "Failed to create $log_dir"
            return 1
        fi
    fi
    chown idmmysql:idmmysql $log_dir
    if [ $? != 0 ] ; then
        echo "Failed to set ownership on $log_dir"
        return 1
    fi

    # Construct the LOG_FILE name and create it and validate it can be written
    touch $log_file
    if [ $? != 0 ] ; then
        echo "Failed to create $log_file"
        return 1
    fi

    # Change permission on log file to rw to all
    chmod 666 $log_file
    if [ $? != 0 ] ; then
        echo "Failed to set permissions on $log_file"
        return 1
    fi

    # Change owner to MySQL
    chown idmmysql:idmmysql $log_file
    if [ $? != 0 ] ; then
        echo "Failed to change ownership of $log_file"
        return 1
    fi

    return 0
}


###########################################################################################
# Function: CheckPassword
# Description: Checks, if the password is defined in global.properties and it is possible
#   to encrypt it
# Parameters: a password key, a previous password in the encrypted form, a path to the passkey
# Return:  0 everything ok, 1 fail
###########################################################################################
CheckPassword()
{
    local password_key="$1"
    local previous_pass_enc="$2"
    local passkey="$3"

    LogMessage "CheckPassword(type=${password_key}, passkey=${passkey}) request has been received. Processing request..."

    # Check if password is stored in global.properties
    if [ -z "${!password_key}" ]; then
        LogMessage "ERROR: ${password_key} is not set in ${GLOBAL_PROPERTY_FILE}"
        return 1
    fi

    # Decrypt the password to change
    if [ ! -r ${passkey} ]; then
        LogMessage "INFO: ${passkey} does not exist or is not readable"
        return 1
    fi

    NEW_PASS=`echo ${!password_key} | ${OPENSSL} enc -a -d -aes-128-cbc -salt -kfile ${passkey}`
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
       LogMessage "ERROR: New password encryption failed"
       return 1
    fi
    if [ -z "${NEW_PASS}" ]; then
        LogMessage "ERROR: Failed to decrypt ${password_key} from ${GLOBAL_PROPERTY_FILE}"
        return 1
    fi

    # decrypt previous password
    PREVIOUS_PASS=`echo ${previous_pass_enc} | ${OPENSSL} enc -a -d -aes-128-cbc -salt -kfile ${passkey}`
    if [  ${PIPESTATUS[0]} -ne 0 ]; then
       LogMessage "ERROR: Old password encryption failed"
       return 1
    fi
    if [ -z "${PREVIOUS_PASS}" ]; then
        LogMessage "ERROR: Failed to decrypt old password provided in script parameter"
        return 1
    fi

    return 0
}

###########################################################################################
# Function: UpdatePasswordinMySQL
# Description: Save password for the user in the db
# Parameters: root password, user name, new password
# Return:  0 everything ok, 1 fail
###########################################################################################
UpdatePasswordinMySQL()
{
    local root_password="$1"
    local user="$2"
    local new_pass="$3"

    LogMessage "UpdatePasswordinMySQL(user=${user}) request has been received. Processing request..."

    if [ -z "$user" ]; then
        LogMessage "ERROR: a user cannot be empty."
        return 1
    fi

    LogMessage "Updating password in MySQL"
    local sql_command="UPDATE mysql.user SET Password=PASSWORD(\"${new_pass}\") WHERE User=\"${user}\";flush privileges;"
    $MYSQL --user=root --password=${root_password} --host=mysql --execute="${sql_command}"

    if [ $? != 0 ]; then
        LogMessage "ERROR: Failed to change password, the error is [$?]"
        return 1
    fi

    LogMessage "UpdatePasswordinMySQL completed successfully"
    return 0
}

##################################################
# MAIN
##################################################

echo "Script to change idm_mysql_admin_password"

#Create log file
SetLogFile $LOG_FILE
if [ $? != 0 ] ; then
   echo "ERROR: SetLogFile failed."
   exit 1
fi

# Verify old password
CheckPassword "idm_mysql_admin_password" "$PREVIOUS_PASS_ENC" "$IDMMYSQL_PASSKEY"
if [ $? != 0 ] ; then
    LogMessage "ERROR: CheckPassword failed"
    exit 1
fi

# Update MySQL openidm password
UpdatePasswordinMySQL "$PREVIOUS_PASS" "$MYSQL_OPENIDM_USER" "$NEW_PASS"
if [ $? != 0 ] ; then
    LogMessage "ERROR: UpdatePasswordinMySQL failed"
    exit 1
fi

# Update MySQL root password
UpdatePasswordinMySQL "$PREVIOUS_PASS" "root" "$NEW_PASS"
if [ $? != 0 ] ; then
    LogMessage "ERROR: UpdatePasswordinMySQL failed"
    exit 1
fi

LogMessage "Password changed successfully"
